import * as Parser from "es-html-parser";
import eslint from "eslint";
import * as estree from "estree";

export interface Document extends Parser.DocumentNode {
  parent: null;
  children: Array<Tag | Text | Comment | Doctype | ScriptTag | StyleTag>;
}

export interface Doctype extends Parser.DoctypeNode {
  parent: Document | Tag;
  open: DoctypeOpen;
  close: DoctypeClose;
  attributes: Array<DoctypeAttribute>;
}

export interface DoctypeOpen extends Parser.DoctypeOpenNode {
  parent: Doctype;
}

export interface DoctypeClose extends Parser.DoctypeCloseNode {
  parent: Doctype;
}

export interface DoctypeAttribute extends Parser.DoctypeAttributeNode {
  parent: Doctype;
}

export interface Comment extends Parser.CommentNode {
  parent: Tag | Document;
  open: CommentOpen;
  close: CommentClose;
  value: CommentContent;
}

export interface CommentOpen extends Parser.CommentOpenNode {
  parent: Comment;
}

export interface CommentClose extends Parser.CommentCloseNode {
  parent: Comment;
}

export interface CommentContent extends Parser.CommentContentNode {
  parent: Comment;
}

export interface Tag extends Parser.TagNode {
  parent: Document | Tag;
  openStart: OpenTagStart;
  openEnd: OpenTagEnd;
  attributes: Array<Attribute>;
  close?: CloseTag;
  children: Array<Tag | Text | StyleTag | ScriptTag>;
}

export interface OpenTagStart extends Parser.OpenTagStartNode {
  parent: Tag;
}

export interface OpenTagEnd extends Parser.OpenTagEndNode {
  parent: Tag;
}

export interface CloseTag extends Parser.CloseTagNode {
  parent: Tag;
}

export interface ScriptTag extends Parser.ScriptTagNode {
  parent: Document | Tag;
  attributes: Array<Attribute>;
  openStart: OpenScriptTagStart;
  openEnd: OpenScriptTagEnd;
  value?: ScriptTagContent;
}

export interface OpenScriptTagStart extends Parser.OpenScriptTagStartNode {
  parent: ScriptTag;
}

export interface OpenScriptTagEnd extends Parser.OpenScriptTagEndNode {
  parent: ScriptTag;
}

export interface CloseScriptTag extends Parser.CloseScriptTagNode {
  parent: ScriptTag;
}

export interface ScriptTagContent extends Parser.ScriptTagContentNode {
  parent: ScriptTag;
}

export interface StyleTag extends Parser.StyleTagNode {
  parent: Document | Tag;
  attributes: Array<Attribute>;
  openStart: OpenStyleTagStart;
  openEnd: OpenStyleTagEnd;
  value?: StyleTagContent;
}

export interface OpenStyleTagStart extends Parser.OpenStyleTagStartNode {
  parent: StyleTag;
}

export interface OpenStyleTagEnd extends Parser.OpenStyleTagEndNode {
  parent: StyleTag;
}

export interface CloseStyleTag extends Parser.CloseStyleTagNode {
  parent: StyleTag;
}

export interface StyleTagContent extends Parser.StyleTagContentNode {
  parent: StyleTag;
}

export interface Attribute extends Parser.AttributeNode {
  parent: Tag;
  key: AttributeKey;
  value?: AttributeValue;
  startWrapper?: AttributeValueWrapperStart;
  endWrapper?: AttributeValueWrapperEnd;
}

export interface AttributeKey extends Parser.AttributeKeyNode {
  parent: Attribute;
}

export interface AttributeValue extends Parser.AttributeValueNode {
  parent: Attribute;
}

export interface AttributeValueWrapperStart
  extends Parser.AttributeValueWrapperStartNode {
  parent: Attribute;
}

export interface AttributeValueWrapperEnd
  extends Parser.AttributeValueWrapperEndNode {
  parent: Attribute;
}

export interface Text extends Parser.TextNode {
  parent: Document | Tag;
}

/**
 *  This is not a node generated by es-html-parser; it is created by utils's splitToLineNodes.
 */
export interface Line {
  type: "Line";
  value: string;
  hasTemplate: boolean;
  range: eslint.AST.Range;
  loc: eslint.AST.SourceLocation;
}

export interface TaggedTemplateExpression
  extends estree.TaggedTemplateExpression {
  parent: estree.Node | null;
  loc: eslint.AST.SourceLocation;
  range: eslint.AST.Range;
  quasi: TemplateLiteral;
}

export interface TemplateLiteral extends estree.TemplateLiteral {
  parent: estree.Node | null;
  loc: eslint.AST.SourceLocation;
  range: eslint.AST.Range;
}

export type TemplateText = Text["parts"][number];

export type OpenTemplate = Exclude<Parser.TemplateNode<any>["open"], undefined>;
export type CloseTemplate = Exclude<
  Parser.TemplateNode<any>["close"],
  undefined
>;
export type AnyPartNode = Parser.PartNode<Parser.NodeTypes>;

export type AnyNode =
  | Document
  | Doctype
  | DoctypeOpen
  | DoctypeClose
  | DoctypeAttribute
  | Comment
  | CommentOpen
  | CommentClose
  | CommentContent
  | Tag
  | OpenTagStart
  | OpenTagEnd
  | CloseTag
  | ScriptTag
  | OpenScriptTagStart
  | OpenScriptTagEnd
  | ScriptTagContent
  | CloseScriptTag
  | StyleTag
  | OpenStyleTagStart
  | OpenStyleTagEnd
  | StyleTagContent
  | CloseStyleTag
  | Attribute
  | AttributeKey
  | AttributeValue
  | AttributeValueWrapperEnd
  | AttributeValueWrapperStart
  | Text
  | Line
  | TaggedTemplateExpression
  | TemplateLiteral;
