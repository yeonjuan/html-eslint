const { cwd } = process;
const { resolve } = require("path");
const { writeFileSync } = require("fs");
const rulesRecord = require("@html-eslint/eslint-plugin/lib/rules");
const prettier = require("prettier");

function generateRulesMarkdown() {
  const rules = {
    ["Best Practice"]: [],
    SEO: [],
    Accessibility: [],
    Style: [],
  };
  Object.entries(rulesRecord).forEach(([ruleId, rule]) =>
    rules[rule.meta.docs.category].push({ ruleId, rule })
  );

  Object.values(rules).forEach((list) =>
    list.sort((a, b) => a.ruleId.localeCompare(b.ruleId))
  );

  const lines = [];
  lines.push(
    "<!-- This file is generated by 'yarn docs' command. Don't edit this -->"
  );
  lines.push("# Rules");

  lines.push(
    `- üîß: Meaning the rule can fix problems automatically by running eslint \`--fix\` options.\n- ‚≠ê: Meaning the rule is recommended.`
  );

  const pushRuleItem = ({ ruleId, rule }) => {
    let meta = "";
    if (rule.meta.docs.recommended) meta += "‚≠ê";
    if (rule.meta.fixable) meta += "üîß";
    if (meta) meta = "(" + meta + ")";
    lines.push(
      `- [@html-eslint/${ruleId}](rules/${ruleId}) ${meta}: ${rule.meta.docs.description}`
    );
  };

  lines.push("## Best Practice");
  rules["Best Practice"].forEach(pushRuleItem);
  lines.push("## SEO");
  rules.SEO.forEach(pushRuleItem);
  lines.push("## Accessibility");
  rules.Accessibility.forEach(pushRuleItem);
  lines.push("## Style");
  rules.Style.forEach(pushRuleItem);

  const markedown = lines.join("\n\n");

  writeFileSync(
    resolve(cwd(), "../../docs/rules.md"),
    prettier.format(markedown, {
      parser: "markdown",
    })
  );
}

module.exports = function generateMarkdowns() {
  generateRulesMarkdown();
};
